<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JAVA虚拟机</title>
      <link href="2021/040860574.html"/>
      <url>2021/040860574.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-Java-内存区域与内存溢出异常"><a href="#1-Java-内存区域与内存溢出异常" class="headerlink" title="1.Java 内存区域与内存溢出异常"></a>1.Java 内存区域与内存溢出异常</h1><h2 id="1-1-运行时数据区域"><a href="#1-1-运行时数据区域" class="headerlink" title="1.1  运行时数据区域"></a>1.1  运行时数据区域</h2><p><img src="G:\Java\hexo\typora-user-images\image-20210408131857063.png" alt="image-20210408131857063"></p><h3 id="1-1-1-Java-堆"><a href="#1-1-1-Java-堆" class="headerlink" title="1.1.1 Java 堆"></a>1.1.1 Java 堆</h3><p>对于绝大多数应用来说，这块区域是 JVM 所管理的内存中最大的一块。线程共享，主要是存放对象实例和数组。内部会划分出多个线程私有的分配缓冲区(Thread Local Allocation Buffer, TLAB)。可以位于物理上不连续的空间，但是逻辑上要连续。</p><p>OutOfMemoryError：如果堆中没有内存完成实例分配，并且堆也无法再扩展时，抛出该异常。</p><h3 id="1-1-2-方法区"><a href="#1-1-2-方法区" class="headerlink" title="1.1.2 方法区"></a>1.1.2 方法区</h3><p>属于共享内存区域，存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</p><p>运行时常量池</p><blockquote><p>属于方法区一部分，用于存放编译期生成的各种字面量和符号引用。编译器和运行期(String 的 intern() )都可以将常量放入池中。内存有限，无法申请时抛出 OutOfMemoryError。</p></blockquote><h3 id="1-1-3-程序计数器"><a href="#1-1-3-程序计数器" class="headerlink" title="1.1.3 程序计数器"></a>1.1.3 程序计数器</h3><p>内存空间小，线程私有。字节码解释器工作是就是通过改变这个计数器的值来选取下一条需要执行指令的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖计数器完成</p><p>如果线程正在执行一个 Java 方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是 Native 方法，这个计数器的值则为 (Undefined)。此内存区域是唯一一个在 Java 虚拟机规范中没有规定任何 OutOfMemoryError 情况的区域。</p><h3 id="1-1-4-Java-虚拟机栈"><a href="#1-1-4-Java-虚拟机栈" class="headerlink" title="1.1.4 Java 虚拟机栈"></a>1.1.4 Java 虚拟机栈</h3><p>线程私有，生命周期和线程一致。描述的是 Java 方法执行的内存模型：每个方法在执行时都会创建一个栈帧(Stack Frame)用于存储局部变量表、操作数栈、动态链接、方法出口等信息。每一个方法从调用直至运行结束，都对应着一个栈帧从虚拟机栈中入栈到出栈的过程。对于执行引擎来说，活动线程中，只有栈顶的栈帧是有效的，称为当前栈帧，这个栈帧所关联的方法称为当前方法。执行引擎所运行的所有字节码指令都只针对当前栈帧进行操作。</p><p>局部变量表：存放了编译期可知的各种基本类型(boolean、byte、char、short、int、float、long、double)、对象引用(reference 类型)和 returnAddress 类型(指向了一条字节码指令的地址)</p><p>操作数栈：虚拟机的解释执行引擎被称为”基于栈的执行引擎”，其中所指的栈就是指操作数栈，也常被称为操作栈。操作数栈也是先进后出的数据结构，是进行数据运算的地方。主要用于保存计算过程的中间结果，同时作为计算过程中变量临时的存储空间。<br>         和局部变量区一样，操作数栈也是被组织成一个以字长为单位的数组。但是和前者不同的是，它不是通过索引来访问，而是通过标准的栈操作—压栈和出栈—来访问的。比如，如果某个指令把一个值压入到操作数栈中，稍后另一个指令就可以弹出这个值来使用。<br>        虚拟机在操作数栈中存储数据的方式和在局部变量区中是一样的：如int、long、float、double、reference和returnType的存储。对于byte、short以及char类型的值在压入到操作数栈之前，也会被转换为int。<br>       虚拟机把操作数栈作为它的工作区——大多数指令都要从这里弹出数据，执行运算，然后把结果压回操作数栈。（也就是说，操作数栈是进行数据运算的地方。）比如，iadd指令就要从操作数栈中弹出两个整数，执行加法运算，其结果又压回到操作数栈中，看看下面的示例，它演示了虚拟机是如何把两个int类型的局部变量相加，再把结果保存到第三个局部变量的：</p><p><img src="G:\Java\hexo\typora-user-images\image-20210408133205354.png" alt="image-20210408133205354"></p><p>​       在这个字节码序列里，前两个指令iload_0和iload_1将存储在局部变量中索引为0和1的整数压入操作数栈中，其后iadd指令从操作数栈中弹出那两个整数相加，再将结果压入操作数栈。第四条指令istore_2则从操作数栈中弹出结果，并把它存储到局部变量区索引为2的位置。下图详细表述了这个过程中局部变量和操作数栈的状态变化，图中没有使用的局部变量区和操作数栈区域以空白表示。</p><p><img src="C:\Users\LENOVO\AppData\Roaming\Typora\typora-user-images\image-20210408133913360.png" alt="image-20210408133913360"></p><p>动态链接：动态链接库又叫共享库（Shared Library），简单地说，库是对一系列程序的封装，静态库是会在链接时与可执行程序合并的库，而动态库则在链接后仍然与可执行文件分离，直到运行时才动态加载。显然，动态库可以共享给多个可执行程序同时使用，更节约硬盘和内存空间。不管是Windows开发者，还是Linux开发者，或者是Android、iOS开发者，我们无时无刻都在生产或者使用动态库，而且很少遇到困难。这得益于一套完整的动态链接机制，该机制保证链接和运行时，能够准确找到正确的动态库。</p><h3 id="1-1-5-本地方法栈"><a href="#1-1-5-本地方法栈" class="headerlink" title="1.1.5 本地方法栈"></a>1.1.5 本地方法栈</h3><p>区别于 Java 虚拟机栈的是，Java 虚拟机栈为虚拟机执行 Java 方法(也就是字节码)服务，而本地方法栈则为虚拟机使用到的 Native 方法服务。也会有 StackOverflowError 和 OutOfMemoryError 异常。</p><p>StackOverflowError：线程请求的栈深度大于虚拟机所允许的深度。<br>OutOfMemoryError：如果虚拟机栈可以动态扩展，而扩展时无法申请到足够的内存。</p><h1 id="2-虚拟机类加载机制"><a href="#2-虚拟机类加载机制" class="headerlink" title="2.虚拟机类加载机制"></a>2.虚拟机类加载机制</h1><blockquote><p>虚拟机把描述类的数据从 Class 文件加载到内存，并对数据进行校验、装换解析和初始化，最终形成可以被虚拟机直接使用的 字节码类型。</p></blockquote><h2 id="2-1-类加载时机"><a href="#2-1-类加载时机" class="headerlink" title="2.1 类加载时机"></a>2.1 类加载时机</h2><blockquote><p>在 Java 语言中，类型的加载、连接和初始化过程都是在程序运行期间完成的。类的生命周期( 7 个阶段)</p></blockquote><p><img src="C:\Users\LENOVO\AppData\Roaming\Typora\typora-user-images\image-20210408140436853.png" alt="image-20210408140436853"></p><p>其中加载、验证、准备、初始化和卸载这五个阶段的顺序是确定的。解析阶段可以在初始化之后再开始(运行时绑定或动态绑定或晚期绑定)。</p><p>以下五种情况必须对类进行初始化(而加载、验证、准备自然需要在此之前完成)：</p><p>（1）遇到 new、getstatic、putstatic 或 invokestatic 这 4 条字节码指令时没初始化触发初始化。使用场景：使用 new 关键字实例化对象、读取一个类的静态字段(被 final 修饰、已在编译期把结果放入常量池的静态字段除外)、调用一个类的静态方法。<br>（2）使用 java.lang.reflect 包的方法对类进行反射调用的时候。<br>（3）当初始化一个类的时候，如果发现其父类还没有进行初始化，则需先触发其父类的初始化。<br>（4）当虚拟机启动时，用户需指定一个要加载的主类(包含 main() 方法的那个类)，虚拟机会先初始化这个主类。<br>（5）当使用 JDK 1.7 的动态语言支持时，如果一个 java.lang.invoke.MethodHandle 实例最后的解析结果 REF_getStatic、REF_putStatic、REF_invokeStatic 的方法句柄，并且这个方法句柄所对应的类没有进行过初始化，则需先触发其初始化。</p><p>前面的五种方式是对一个类的主动引用，除此之外，所有引用类的方法都不会触发初始化，叫作被动引用。举几个例子</p><pre class=" language-java"><code class="language-java">   <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SuperClass</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SuperClass init!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token number">1127</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SubClass</span> <span class="token keyword">extends</span> <span class="token class-name">SuperClass</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SubClass init!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConstClass</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ConstClass init!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String HELLOWORLD <span class="token operator">=</span> <span class="token string">"hello world!"</span><span class="token punctuation">}</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NotInitialization</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>SubClass<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         *  output : SuperClass init!         *          * 通过子类引用父类的静态对象不会导致子类的初始化         * 只有直接定义这个字段的类才会被初始化         */</span>         SuperClass<span class="token punctuation">[</span><span class="token punctuation">]</span> sca <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperClass</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         *  output :          *          * 通过数组定义来引用类不会触发此类的初始化         * 虚拟机在运行时动态创建了一个数组类         */</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ConstClass<span class="token punctuation">.</span>HELLOWORLD<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 常量在编译阶段会存入调用类的常量池当中，         * 本质上并没有直接引用到定义类常量的类，         * 因此不会触发定义常量的类的初始化。         * “hello world” 在编译期常量传播优化时已经存储到          *  NotInitialization 常量池中了。         */</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>}</p><h2 id="2-2-类的加载过程"><a href="#2-2-类的加载过程" class="headerlink" title="2.2 类的加载过程"></a>2.2 类的加载过程</h2><h3 id="2-2-1-加载"><a href="#2-2-1-加载" class="headerlink" title="2.2.1 加载"></a>2.2.1 加载</h3><p>通过一个类的全限定名来获取定义次类的二进制流(ZIP 包、网络、运算生成、JSP 生成、数据库读取)。<br>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。<br>在内存中生成一个代表这个类的 java.lang.Class 对象，作为方法去这个类的各种数据的访问入口。<br>数组类的特殊性：数组类本身不通过类加载器创建，它是由 Java 虚拟机直接创建的。但数组类与类加载器仍然有很密切的关系，因为数组类的元素类型最终是要靠类加载器去创建的，数组创建过程如下：</p><p>如果数组的组件类型是引用类型，那就递归采用类加载加载。<br>如果数组的组件类型不是引用类型，Java 虚拟机会把数组标记为引导类加载器关联。<br>数组类的可见性与他的组件类型的可见性一致，如果组件类型不是引用类型，那数组类的可见性将默认为 public。<br>内存中实例的 java.lang.Class 对象存在方法区中。作为程序访问方法区中这些类型数据的外部接口。<br>加载阶段与连接阶段的部分内容是交叉进行的，但是开始时间保持先后顺序。</p><h3 id="2-2-2-验证"><a href="#2-2-2-验证" class="headerlink" title="2.2.2 验证"></a>2.2.2 验证</h3><p>是连接的第一步，确保 Class 文件的字节流中包含的信息符合当前虚拟机要求。</p><p>文件格式验证</p><p>是否以魔数 0xCAFEBABE 开头<br>主、次版本号是否在当前虚拟机处理范围之内<br>常量池的常量是否有不被支持常量的类型（检查常量 tag 标志）<br>指向常量的各种索引值中是否有指向不存在的常量或不符合类型的常量<br>CONSTANT_Utf8_info 型的常量中是否有不符合 UTF8 编码的数据<br>Class 文件中各个部分集文件本身是否有被删除的附加的其他信息<br>……<br>只有通过这个阶段的验证后，字节流才会进入内存的方法区进行存储，所以后面 3 个验证阶段全部是基于方法区的存储结构进行的，不再直接操作字节流。</p><p>元数据验证</p><p>这个类是否有父类（除 java.lang.Object 之外）<br>这个类的父类是否继承了不允许被继承的类（final 修饰的类）<br>如果这个类不是抽象类，是否实现了其父类或接口之中要求实现的所有方法<br>类中的字段、方法是否与父类产生矛盾（覆盖父类 final 字段、出现不符合规范的重载）<br>这一阶段主要是对类的元数据信息进行语义校验，保证不存在不符合 Java 语言规范的元数据信息。</p><p>字节码验证</p><p>保证任意时刻操作数栈的数据类型与指令代码序列都鞥配合工作（不会出现按照 long 类型读一个 int 型数据）<br>保证跳转指令不会跳转到方法体以外的字节码指令上<br>保证方法体中的类型转换是有效的（子类对象赋值给父类数据类型是安全的，反过来不合法的）<br>……<br>这是整个验证过程中最复杂的一个阶段，主要目的是通过数据流和控制流分析，确定程序语义是合法的、符合逻辑的。这个阶段对类的方法体进行校验分析，保证校验类的方法在运行时不会做出危害虚拟机安全的事件。</p><p>符号引用验证</p><p>符号引用中通过字符创描述的全限定名是否能找到对应的类<br>在指定类中是否存在符方法的字段描述符以及简单名称所描述的方法和字段<br>符号引用中的类、字段、方法的访问性（private、protected、public、default）是否可被当前类访问<br>……<br>最后一个阶段的校验发生在迅疾将符号引用转化为直接引用的时候，这个转化动作将在连接的第三阶段——解析阶段中发生。符号引用验证可以看做是对类自身以外（常量池中的各种符号引用）的信息进行匹配性校验，还有以上提及的内容。<br>符号引用的目的是确保解析动作能正常执行，如果无法通过符号引用验证将抛出一个 java.lang.IncompatibleClass.ChangeError 异常的子类。如 java.lang.IllegalAccessError、java.lang.NoSuchFieldError、java.lang.NoSuchMethodError 等。</p><h3 id="2-2-3-准备"><a href="#2-2-3-准备" class="headerlink" title="2.2.3 准备"></a>2.2.3 准备</h3><p>这个阶段正式为类分配内存并设置类变量初始值，内存在方法去中分配(含 static 修饰的变量不含实例变量)。</p><p>public static int value = 1127;<br>这句代码在初始值设置之后为 0，因为这时候尚未开始执行任何 Java 方法。而把 value 赋值为 1127 的 putstatic 指令是程序被编译后，存放于 clinit() 方法中，所以初始化阶段才会对 value 进行赋值。</p><p>基本数据类型的零值<br><img src="C:\Users\LENOVO\AppData\Roaming\Typora\typora-user-images\image-20210408141509652.png" alt="image-20210408141509652"><br>特殊情况：如果类字段的字段属性表中存在 ConstantValue 属性，在准备阶段虚拟机就会根据 ConstantValue 的设置将 value 赋值为 1127。</p><h3 id="2-2-4-解析"><a href="#2-2-4-解析" class="headerlink" title="2.2.4 解析"></a>2.2.4 解析</h3><p>这个阶段是虚拟机将常量池内的符号引用替换为直接引用的过程。</p><p>符号引用<br>符号引用以一组符号来描述所引用的目标，符号可以使任何形式的字面量。</p><p>直接引用<br>直接引用可以使直接指向目标的指针、相对偏移量或是一个能间接定位到目标的句柄。直接引用和迅疾的内存布局实现有关</p><p>解析动作主要针对类或接口、字段、类方法、接口方法、方法类型、方法句柄和调用点限定符 7 类符号引用进行，分别对应于常量池的 7 中常量类型。</p><h3 id="2-2-5-初始化"><a href="#2-2-5-初始化" class="headerlink" title="2.2.5 初始化"></a>2.2.5 初始化</h3><p>前面过程都是以虚拟机主导，而初始化阶段开始执行类中的 Java 代码。</p><h2 id="2-3-类加载器"><a href="#2-3-类加载器" class="headerlink" title="2.3 类加载器"></a>2.3 类加载器</h2><p>通过一个类的全限定名来获取描述此类的二进制字节流。</p><h3 id="2-3-1-双亲委派模型"><a href="#2-3-1-双亲委派模型" class="headerlink" title="2.3.1 双亲委派模型"></a>2.3.1 双亲委派模型</h3><p>从 Java 虚拟机角度讲，只存在两种类加载器：一种是启动类加载器（C++ 实现，是虚拟机的一部分）；另一种是其他所有类的加载器（Java 实现，独立于虚拟机外部且全继承自 java.lang.ClassLoader）</p><p>启动类加载器<br>加载 lib 下或被 -Xbootclasspath 路径下的类</p><p>扩展类加载器<br>加载 lib/ext 或者被 java.ext.dirs 系统变量所指定的路径下的类</p><p>引用程序类加载器<br>ClassLoader负责，加载用户路径上所指定的类库。</p><p><img src="C:\Users\LENOVO\AppData\Roaming\Typora\typora-user-images\image-20210408141736907.png" alt="image-20210408141736907"></p><p> 除顶层启动类加载器之外，其他都有自己的父类加载器。<br>工作过程：如果一个类加载器收到一个类加载的请求，它首先不会自己加载，而是把这个请求委派给父类加载器。只有父类无法完成时子类才会尝试加载。</p><h3 id="2-3-2-破坏双亲委派模型"><a href="#2-3-2-破坏双亲委派模型" class="headerlink" title="2.3.2 破坏双亲委派模型"></a>2.3.2 破坏双亲委派模型</h3><p>keyword：线程上下文加载器(Thread Context ClassLoader)</p><h1 id="3-HotSpot-虚拟机对象"><a href="#3-HotSpot-虚拟机对象" class="headerlink" title="3.HotSpot 虚拟机对象"></a>3.HotSpot 虚拟机对象</h1><blockquote><p>主要介绍数据是如何创建、如何布局以及如何访问的。</p></blockquote><h2 id="3-1对象的创建"><a href="#3-1对象的创建" class="headerlink" title="3.1对象的创建"></a>3.1对象的创建</h2><p>遇到 new 指令时，首先检查这个指令的参数是否能在常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已经被加载、解析和初始化过。如果没有，执行相应的类加载。</p><p>类加载检查通过之后，为新对象分配内存(内存大小在类加载完成后便可确认)。在堆的空闲内存中划分一块区域(‘指针碰撞-内存规整’或‘空闲列表-内存交错’的分配方式)。</p><p>前面讲的每个线程在堆中都会有私有的分配缓冲区(TLAB)，这样可以很大程度避免在并发情况下频繁创建对象造成的线程不安全。</p><p>内存空间分配完成后会初始化为 0(不包括对象头)，接下来就是填充对象头，把对象是哪个类的实例、如何才能找到类的元数据信息、对象的哈希码、对象的 GC 分代年龄等信息存入对象头。</p><p>执行 new 指令后执行 init 方法后才算一份真正可用的对象创建完成。</p><h2 id="3-2-对象的内存布局"><a href="#3-2-对象的内存布局" class="headerlink" title="3.2 对象的内存布局"></a>3.2 对象的内存布局</h2><blockquote><p>在 HotSpot 虚拟机中，分为 3 块区域：对象头(Header)、实例数据(Instance Data)和对齐填充(Padding)</p></blockquote><p>对象头(Header)：包含两部分，第一部分用于存储对象自身的运行时数据，如哈希码、GC 分代年龄、锁状态标志、线程持有的锁、偏向线程 ID、偏向时间戳等，32 位虚拟机占 32 bit，64 位虚拟机占 64 bit。官方称为 ‘Mark Word’。第二部分是类型指针，即对象指向它的类的元数据指针，虚拟机通过这个指针确定这个对象是哪个类的实例。另外，如果是 Java 数组，对象头中还必须有一块用于记录数组长度的数据，因为普通对象可以通过 Java 对象元数据确定大小，而数组对象不可以。</p><p>实例数据(Instance Data)：程序代码中所定义的各种类型的字段内容(包含父类继承下来的和子类中定义的)。</p><p>对齐填充(Padding)：不是必然需要，主要是占位，保证对象大小是某个字节的整数倍。</p><h2 id="3-3-对象的访问定位"><a href="#3-3-对象的访问定位" class="headerlink" title="3.3 对象的访问定位"></a>3.3 对象的访问定位</h2><p>使用对象时，通过栈上的 reference 数据来操作堆上的具体对象。</p><p>通过句柄访问</p><p>Java 堆中会分配一块内存作为句柄池。reference 存储的是句柄地址。详情见图。</p><p><img src="C:\Users\LENOVO\AppData\Roaming\Typora\typora-user-images\image-20210408142715103.png" alt="image-20210408142715103"></p><p> 使用直接指针访问</p><p>reference 中直接存储对象地址</p><p><img src="C:\Users\LENOVO\AppData\Roaming\Typora\typora-user-images\image-20210408142757109.png" alt="image-20210408142757109"></p><p>比较：使用句柄的最大好处是 reference 中存储的是稳定的句柄地址，在对象移动(GC)是只改变实例数据指针地址，reference 自身不需要修改。直接指针访问的最大好处是速度快，节省了一次指针定位的时间开销。如果是对象频繁 GC 那么句柄方法好，如果是对象频繁访问则直接指针访问好。</p><h1 id="4-垃圾回收器与内存分配策略"><a href="#4-垃圾回收器与内存分配策略" class="headerlink" title="4.垃圾回收器与内存分配策略"></a>4.垃圾回收器与内存分配策略</h1><h2 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1 概述"></a>4.1 概述</h2><p>程序计数器、虚拟机栈、本地方法栈 3 个区域随线程生灭(因为是线程私有)，栈中的栈帧随着方法的进入和退出而有条不紊地执行着出栈和入栈操作。而 Java 堆和方法区则不一样，一个接口中的多个实现类需要的内存可能不一样，一个方法中的多个分支需要的内存也可能不一样，我们只有在程序处于运行期才知道那些对象会创建，这部分内存的分配和回收都是动态的，垃圾回收期所关注的就是这部分内存。</p><h2 id="4-2-对象已死吗？"><a href="#4-2-对象已死吗？" class="headerlink" title="4.2 对象已死吗？"></a>4.2 对象已死吗？</h2><p>在进行内存回收之前要做的事情就是判断那些对象是‘死’的，哪些是‘活’的。</p><h3 id="4-2-1-引用计数法"><a href="#4-2-1-引用计数法" class="headerlink" title="4.2.1 引用计数法"></a>4.2.1 引用计数法</h3><p>给对象添加一个引用计数器。但是难以解决循环引用问题。</p><p><img src="C:\Users\LENOVO\AppData\Roaming\Typora\typora-user-images\image-20210408143228822.png" alt="image-20210408143228822"></p><p>从图中可以看出，如果不下小心直接把 Obj1-reference 和 Obj2-reference 置 null。则在 Java 堆当中的两块内存依然保持着互相引用无法回收。</p><h3 id="4-2-2-可达性分析法"><a href="#4-2-2-可达性分析法" class="headerlink" title="4.2.2 可达性分析法"></a>4.2.2 可达性分析法</h3><p>通过一系列的 ‘GC Roots’ 的对象作为起始点，从这些节点出发所走过的路径称为引用链。当一个对象到 GC Roots 没有任何引用链相连的时候说明对象不可用。</p><p><img src="C:\Users\LENOVO\AppData\Roaming\Typora\typora-user-images\image-20210408143309596.png" alt="image-20210408143309596"></p><p>可作为 GC Roots 的对象：</p><blockquote><p>虚拟机栈(栈帧中的本地变量表)中引用的对象<br>方法区中类静态属性引用的对象<br>方法区中常量引用的对象<br>本地方法栈中 JNI(即一般说的 Native 方法) 引用的对象</p></blockquote><h3 id="4-2-3-再谈引用"><a href="#4-2-3-再谈引用" class="headerlink" title="4.2.3 再谈引用"></a>4.2.3 再谈引用</h3><p>前面的两种方式判断存活时都与‘引用’有关。但是 JDK 1.2 之后，引用概念进行了扩充，下面具体介绍。</p><p>下面四种引用强度一次逐渐减弱</p><p>强引用</p><blockquote><p>类似于 Object obj = new Object(); 创建的，只要强引用在就不回收。</p></blockquote><p>软引用</p><blockquote><p>SoftReference 类实现软引用。在系统要发生内存溢出异常之前，将会把这些对象列进回收范围之中进行二次回收。</p></blockquote><p>弱引用</p><blockquote><p>WeakReference 类实现弱引用。对象只能生存到下一次垃圾收集之前。在垃圾收集器工作时，无论内存是否足够都会回收掉只被弱引用关联的对象。</p></blockquote><p>虚引用</p><blockquote><p>PhantomReference 类实现虚引用。无法通过虚引用获取一个对象的实例，为一个对象设置虚引用关联的唯一目的就是能在这个对象被收集器回收时收到一个系统通知。</p></blockquote><h3 id="4-2-4-生存还是死亡"><a href="#4-2-4-生存还是死亡" class="headerlink" title="4.2.4 生存还是死亡"></a>4.2.4 生存还是死亡</h3><p>即使在可达性分析算法中不可达的对象，也并非是“facebook”的，这时候它们暂时出于“缓刑”阶段，一个对象的真正死亡至少要经历两次标记过程：如果对象在进行中可达性分析后发现没有与 GC Roots 相连接的引用链，那他将会被第一次标记并且进行一次筛选，筛选条件是此对象是否有必要执行 finalize() 方法。当对象没有覆盖 finalize() 方法，或者 finalize() 方法已经被虚拟机调用过，虚拟机将这两种情况都视为“没有必要执行”。</p><p>如果这个对象被判定为有必要执行 finalize() 方法，那么这个对象竟会放置在一个叫做 F-Queue 的队列中，并在稍后由一个由虚拟机自动建立的、低优先级的 Finalizer 线程去执行它。这里所谓的“执行”是指虚拟机会出发这个方法，并不承诺或等待他运行结束。finalize() 方法是对象逃脱死亡命运的最后一次机会，稍后 GC 将对 F-Queue 中的对象进行第二次小规模的标记，如果对象要在 finalize() 中成功拯救自己 —— 只要重新与引用链上的任何一个对象简历关联即可。</p><p>finalize() 方法只会被系统自动调用一次。</p><h3 id="4-2-5-回收方法区"><a href="#4-2-5-回收方法区" class="headerlink" title="4.2.5 回收方法区"></a>4.2.5 回收方法区</h3><blockquote><p>在堆中，尤其是在新生代中，一次垃圾回收一般可以回收 70% ~ 95% 的空间，而永久代的垃圾收集效率远低于此。</p></blockquote><blockquote><p>永久代垃圾回收主要两部分内容：废弃的常量和无用的类。</p></blockquote><p>判断废弃常量：一般是判断没有该常量的引用。</p><p>判断无用的类：要以下三个条件都满足</p><blockquote><p>该类所有的实例都已经回收，也就是 Java 堆中不存在该类的任何实例</p></blockquote><blockquote><p>加载该类的 ClassLoader 已经被回收</p></blockquote><blockquote><p>该类对应的 java.lang.Class 对象没有任何地方呗引用，无法在任何地方通过反射访问该类的方法</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
